#ifndef RFORESTS_H_
#define RFORESTS_H_

#include <thread>
#include <mutex>
#include <future>
#include <chrono>

#include "tree.h"

using namespace std;

class RForest {
private:
    Dataset*    train_set_;   // Training set
    TargetData* targ_data_;
    MetaData*   meta_data_;

    vector<vector<int> > bagging_set_;  // Bagging set for each tree, generated by each individual tree.
    vector<vector<int> > oob_set_vec_;  // Out-of-Bag set for each tree.
    vector<Tree*>        tree_vec_;     // All trees in the forest.

    int       ntree_;         // Number of trees.
    unsigned* tree_seeds_;     // Seed for each tree.
    int       nlabels_;        // Number of class labels in the target variable.
    bool      importance_;     // whether calculate variable importance.
    int       mtry_;           // Number of variables selected for node splitting.
    bool      weights_;        // Weight variable or not.
    int       min_node_size_;  // Minimum node size.

    double rf_oob_error_rate_;
    double rf_strength_;
    double rf_correlation_;
    double c_s2_;
    double emr2_;


    vector<vector<int> > oob_predict_label_freq_matrix_;  // Matrix of size nobs*nlabels: Predicted label frequency count for each observation in OOB.
    vector<int>          oob_predict_label_vec_;          // Vector of size nobs: Predicted label for each observation in OOB, max predicted label, -1 by default, that is not in OOB.
    vector<int>          oob_count_vec_;                  // Vector of size nobs: Number of times the observation being in OOB.
    vector<double>       oob_confusion_matrix_;           // Vector of size (nlabels+1)*nlabels: Confusion matrix for OOB, row - predicted label and class error, column - actual label.
    vector<int>          max_j_;

    vector<double> raw_perm_VIs_;    // Vector of size (nlabels+1)*nvars: Raw vairable importance on each class label, before scaled, plus one row for VI over all class labels.
    vector<double> sigma_perm_VIs_;  // Vector of size (nlabels+1)*nvars: Standard deviation of variable impaortance on each class label, , plus one row for VI SD over all class labels.
    vector<double> IGR_VIs_;         // Vector of size nvars: The information gain ratio decreases for each variable.

    mutex mut_;

    volatile bool* pInterrupt_;  // Interruption or exception flag.
    bool isParallel_;  // Run in parallel or not.

    typedef void (RForest::*predictor)(Dataset* data, int index, double* out_iter);

    void collectBasicStatistics ();
    void calcOOBConfusionErrorRateAndStrength ();
    void calcRFCorrelationAndCS2 ();
    void assessPermVariableImportance ();

public:

    RForest (Rcpp::List& model_list, MetaData* meta_data, TargetData* targdata);
    RForest (Dataset*, TargetData*, MetaData*, int, int, int, bool, bool, SEXP, volatile bool*);
    ~RForest ();

    Rcpp::List predict (Dataset* data, int type);

    void saveModel (Rcpp::List& wsrf_R);
    void saveMeasures (Rcpp::List& wsrf_R);

    void calcEvalMeasures ()
    /*
     * Calculate various evaluation measures for random forests.
     */
    {
        int nobs    = targ_data_->nobs();

        max_j_                         = vector<int>(nobs, -1);
        oob_predict_label_vec_         = vector<int>(nobs, NA_INTEGER);
        oob_count_vec_                 = vector<int>(nobs, 0);
        oob_predict_label_freq_matrix_ = vector<vector<int> >(nobs, vector<int>(nlabels_, 0));
        oob_confusion_matrix_          = vector<double>((nlabels_+1)*nlabels_, 0);
        IGR_VIs_                       = vector<double>(meta_data_->nvars(), 0),

        collectBasicStatistics();
        calcOOBConfusionErrorRateAndStrength();
        calcRFCorrelationAndCS2();
        if (importance_) assessPermVariableImportance();
    }

    void buildOneTree (int ind);
    void buidForestSeq ();

    // parallel: 0 or 1 (sequential);  < 0 (cores-2 threads); > 1 (the exact num of threads)
    void buildForestAsync (int parallel);
    void buildOneTreeAsync (int* index);

};

#endif
